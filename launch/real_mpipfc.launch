<?xml version="1.0" ?>
<launch>
  <!-- specify name of the task yaml file here -->
  <param name="task_file_name" type="string" value="task"/>
  <!-- specify path to task yaml file here -->
  <param name="task_folder_path" type="string" value="../catkin_ws/src/lrt_mpipfc/config/Tasks/example_task/"/>
  <!-- specify path to exception folder here (optional) -->
  <param name="exception_folder_path" type="string" value="../catkin_ws/src/lrt_mpipfc/config/Tasks/example_task/exception/"/>

  <!-- either MPIC-PF or PBD-Controller (i.e. only gravity compensation) is used -->
  <arg name="use_pbd_controller" default="false"/>
  <param name="use_pbd_controller" type="bool" value="$(arg use_pbd_controller)"/>

  <!-- other arguments -->
	<arg name="robot" default="panda" doc="choose your robot. Possible values: [panda, fr3]"/>
  <arg name="arm_id" default="$(arg robot)" />
  <arg name="load_gripper" default="true" />
  <arg name="xacro_args" default="" />
  <arg name="use_fts" default="true"/>

  <!-- robot kinematics -->
  <param name="robot_description" command="$(find xacro)/xacro $(find franka_description)/robots/$(arg robot)/$(arg robot).urdf.xacro hand:=false arm_id:=$(arg arm_id) $(arg xacro_args)"/>

  <!-- gripper -->
  <include file="$(find franka_gripper)/launch/franka_gripper.launch" if="$(arg load_gripper)">
    <arg name="robot_ip" value="$(arg robot_ip)" />
    <arg name="arm_id"   value="$(arg arm_id)" />
  </include>

  <!-- start franka control node -->
  <node name="franka_control" pkg="franka_control" type="franka_control_node" output="screen" required="true">
    <rosparam command="load" file="$(find franka_control)/config/franka_control_node.yaml" subst_value="true" />
    <param name="robot_ip" value="$(arg robot_ip)" />
  </node>

  <!-- launch Force Torque Sensor if arg('use_fts') == true -->
  <group if="$(arg use_fts)">
    <node name="rq_sensor" pkg="robotiq_ft_sensor" type="rq_sensor"/>
  </group>

  <!-- load state publishers -->
  <rosparam command="load" file="$(find franka_control)/config/default_controllers.yaml" subst_value="true" />
  <node name="state_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="franka_state_controller"/>
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen"/>
  <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
    <rosparam if="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states, franka_gripper/joint_states] </rosparam>
    <rosparam unless="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states] </rosparam>
    <param name="rate" value="30"/>
  </node>

  <!-- load joint controller configurations from YAML file to parameter server -->
  <rosparam command="load" file="$(find lrt_mpipfc)/config/lrt_mpipfc.yaml" subst_value="true"/>
  <rosparam command="load" file="$(find lrt_mpipfc)/config/real_mpipfc.yaml" subst_value="true"/>

  <!-- load the controllers --> <!-- joint_state_controller  -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="real_mpic_controller" />

</launch>